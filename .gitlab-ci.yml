stages:
  - Lint
  - Testing
  - QA
  - Build
  - Deploy

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

# Use a Node.js image for Angular tasks
image: node:20

before_script:
  - npm install -g @angular/cli  # Install Angular CLI globally
  - npm install

Angular Lint:
  stage: Lint
  only:
    - merge_requests
  script:
    - ng lint

Angular Test:
  # Angular Testing
  ## https://browserstack.com/guide/angular-js-testing
  ## https://www.npmjs.com/package/karma-junit-reporter
  stage: Testing
  script:
      - ./node_modules/.bin/karma start karma.conf.js  # Use the local Karma binary and specify the config file
  artifacts:
    when: always
    paths:
      - coverage/
    reports:
      junit: junit.xml
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true"
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

sonarcloud-check:
  stage: QA
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true"
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

Build Angular:
  stage: Build
  script:
    - ng build --prod
  artifacts:
    paths:
      - dist/
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true"
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

Deploy Angular:
  stage: Deploy
  script:
    - echo "Deploying Angular application..."
    # Add your deployment commands here
    # Example: scp -r dist/ user@server:/path/to/deploy
  only:
    - main
